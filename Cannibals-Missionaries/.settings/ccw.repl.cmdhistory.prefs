cmdhistory=["(right-bank)" "right-bank" "(\\n  wrong-bank 2)" "(move-boat 1 1 wrong-bank right-bank)" "(depart-bank 1)" "(\\n  wrong-bank 1)" "(-  (\\n     wrong-bank 1) 1)" "(move-boat 1 1 wrong-bank right-bank)" " (move-boat 1 1 wrong-bank right-bank)" "(let b [1 2 3 ]\\n  b)" "(let [b [1 2 3 ]]\\n     b)" "(let [b [(- 1 2) 2 3 ]]\\n        b)" "(let [b [(- (wrong-bank 0) cannibals) 2 3 ]]\\n           b)" "(let [b [(- (wrong-bank 0) 1) 2 3 ]]\\n              b)" "(map - [1 2 3] [ 1 2 3])" "(moveboat wrong-bank right-bank [1 1 1])" "(move-boat wrong-bank right-bank [1 1 1])" "(move-boat wrong-bank [1 1 1])" "(move-boat wrong-bank [2 2 1])" "(defn check-bank [](map - [3 3 1] wrong-bank))" "check-bank" "(check-bank)" "(\= (map - [3 3 1] wrong-bank) (0 0 0)" "(\= (map - [3 3 1] wrong-bank) (0 0 0))" "(\= (vec (map - [3 3 1] wrong-bank)) [0 0 0])" "(check-bank)" "(move-boat wrong-bank [3 3 1])" "valid-moves" "(valid-moves 1)" "(map + valid-moves valid-moves)" "(map (nth valid-moves %) (range 3))" "(map  (range 3)(nth valid-moves %))" "(eight-puzzle-moves [0 1 2 3 4 5 6 7 8 9])" "try" "(try)" "(try wrong-bank)" "(try-it wrong-bank)" "(map (try-it %) ((try-it wrong-bank)%))" "(map (try-it %) ((try-it wrong-bank)))" "(map (try-it %) (try-it wrong-bank))" "(try-it wrong-bank)" "((try-it wrong-bank) 1)" "(try-it ((try-it ((try-it wrong-bank) 1)) 1))" "(try-it wrong-bank)" "wrong-bank" "(wrong-bank)" "(try-it wrong-bank)" "(try-it ((try-it ((try-it wrong-bank) 1)) 1))" "(vali-d moves [3 3 1])" "(valid-moves [3 3 1])" "(search \#(win-con %) [3 3 1] concat valid-moves)" "(search \#(\= % [0 0 0]) [3 3 1] concat valid-moves)" " (search \#(\= % [0 0 0]) [3 3 1] concat valid-moves)" "(flatten [[3 3 0]])" "(\= [[3 3 0]] [3 3 0])" " (\= (vec (flatten [[3 3 0]])) [3 3 0])" "(search \#(\= (vec (flatten %)) [0 0 0]) [3 3 1] concat valid-moves)" "(valid-moves [3 3 1])" "(eight-puzzle-moves [0 1 2 3 4 5 6 7 8 9])" "(try-it [3 3 1])" "(search \#(\= (vec (flatten %)) [0 0 0])\\n        [3 3 1] \\n        \#(concat %2 %1) \\n        valid-moves)" "(bank-depth)" "(bank-breadth)" "(bank-depth)" "(bank-breadth)" "(bank-depth)" "(bank-breadth)" "(bank-depth)" "(+ [3 3 1] [1 1 0])" "(map + [3 3 1] [1 1 0])" "(def this-vec [3 3 1])" "(nth this-vec 0)" "(map - [ 3 1] [ 2 1])" "( vec (map - [ 3 1] [ 2 1]))" "(map - [3 3] [[0 1]\\n[1 0] \\n[1 1]\\n[0 2]\\n[2 0 ]])" "(map - [3 3] [[0 1]\\n   [1 0] \\n   [1 1]\\n   [0 2]\\n   [2 0 ]])\\nClassCastException" "(map - [[3 3][3 3]] [[1 1][1 1]])" "(map - [1 1 ] [1 1])" "(take 5 [3 3 1])" "(take 5 (repeat [3 3 1]))" "(vec (take 5 (repeat [3 3 1])))" "(vec (take 6 (repeat [3 3 1])))" "(map - (vec (take 6 (repeat [3 3 1]))) (vec (take 6 (repeat [3 3 1]))))" "[[0 1 1]\\n                                  [1 0 1] \\n                                  [1 1 1] \\n                                  [0 2 1] \\n                                  [2 0 1]]" "(let [a [1 2]]\\n      a)" "(inc 1)" "(sucessor-func [3 3 1])" " (sucessor-func 1)" "(nth [3 3 1] 0)" "(vec (take 6 (repeat [3 3 1])))" "(vec ([0 1 1]\\n                          [1 0 1] \\n                          [1 1 1] \\n                          [0 2 1] \\n                          [2 0 1]))" "(vec '([0 1 1]\\n                           [1 0 1] \\n                           [1 1 1] \\n                           [0 2 1] \\n                           [2 0 1]))" "(sucessor-func [3 3 1])" "(flatten [[3 3 1][3 3 1]])" "(map - [3 3 1] [3 3 1])" "(map - [[3 3 1]] [[3 3 1]])" "(map - (vec (flatten [[3 3 1]]) (vec (flatten [[3 3 1]])))" "(map - (vec (flatten [[3 3 1]]) (vec (flatten [[3 3 1]]))))" " (map - (vec (flatten [[3 3 1]])) (vec (flatten [[3 3 1]])))" "(vec (map - (vec (flatten [[3 3 1]])) (vec (flatten [[3 3 1]]))))" "(partition 3 [3 3 3 3 33 3 3 3])" "(vec (partition 3 [3 3 3 3 33 3 3 3])" "(vec (partition 3 [3 3 3 3 33 3 3 3]))" "(map - (map nth ([[3][3][1]] %)(range 1)) (map nth ([[3][3][1]] %)(range 1))" "(map - (map nth ([[3][3][1]] %)(range 1)) (map nth ([[3][3][1]] %)(range 1)))" "(map nth ([[3][3][1]] %)(range 1))" " (map nth \#([[3][3][1]] %)(range 1))" "(map nth \#([[3][3][1]] %)(range 3))" "(map (nth \#([[3][3][1]] %)) (range 3))" "(map \#(nth ([[3][3][1]] %)) (range 3))" "(map \#(nth ([[3][3][1]]) %) (range 3))" "(map \#(nth [[3][3][1]] %) (range 3))" "(vec (map \#(nth [[3][3][1]] %) (range 3)))" "(map - (map \#(nth [[3][3][1]] %) (range 3)) (map \#(nth [[3][3][1]] %) (range 3)))" "(map vec [(1 2) (3 4 5)])" "(map vec ([(1 2) (3 4 5)]))" "(partition-by 1 [3 3 3 3 3 3 3])" "(partition-by 2 [3 3 3 3 3 3 3])" "(def foo1 ['(1 2) '(3 4)])" "foo1" "(mapv vec foo)" "(mapv vec foo1)" "(split-at [ 3 3 33 3 3 3])" "(split-at 3 [ 3 3 33 3 3 3])" "(mapv vec (split-at 3 [ 3 3 33 3 3 3]))" "(succesor-func [3 3 1])" "(frontiers [3 3 1])" "(frontiers [3 3 0])" "(bank-depth)" "5" "(+ 3 3)" "(frontiers [3 3 1])" "(first [ 3 3 3])" "(>\= 1 1)" "(conj [3 3 3] [3 3 3])" "(cons [3 3 3] [3 3 3])" " (concat [3 3 3] [3 3 3])" " (conj [3 3 3] [[3 3 3]])" "(concat [ 3 3 3 3 3 3] [3 3 3])" "(mapv vec (partition 3 (concat [ 3 3 3 3 3 3] [3 3 3])))" "(bank-depth)" " (mapv vec (partition (3 3 3 3 3 3 3 3 3 3)))" "(mapv vec (partition '(3 3 3 3 3 3 3 3 3 3)))" "(mapv vec (partition 3 '(3 3 3 3 3 3 3 3 3 3)))" "(frontiers [3 3 1])" "(rest [[3 2 0] [2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0]])" "(empty?  [[3 2 0] [2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0]])" " (empty?([2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0]))" " (empty? '([2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0]))" "(empty? (vec ([2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0])))" " (empty? (vec '([2 3 0] [2 2 0] [3 1 0] [1 3 0] [3 1 0])))" "(let [x (rest [[3 23][32 3 2][3 232]])]\\n  x)" "(let [x (vec (rest [[3 23][32 3 2][3 232]]))]\\n     x)"]
eclipse.preferences.version=1
