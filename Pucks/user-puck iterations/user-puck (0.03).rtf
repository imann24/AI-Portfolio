{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red204\green122\blue122;\red127\green0\blue85;
\red204\green176\blue122;\red42\green0\blue255;\red122\green204\blue122;\red122\green204\blue176;\red122\green176\blue204;
\red122\green122\blue204;\red176\green122\blue204;\red204\green122\blue176;\red63\green95\blue191;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf2 ;; Definition for user agents. This is a good template to build on to produce\cf0 \
\cf2 ;; smarter agents.\cf0 \
\cf2 ;; Code cowritten by Grusha Prasad and Isaiah Mann\cf0 \
\pard\pardeftab720
\cf3 (\cf4 ns\cf0  pucks.agents.user  \
  \cf5 (\cf6 :use\cf0  [pucks globals util vec2D]\
        pucks.agents.active\
        clojure.set\
        quil.core\cf5 )\cf3 )\cf0 \
\pard\pardeftab720
\cf2 ;\cf0 \
\cf2 ;(defn user-proposals [p]\cf0 \
\cf2 ;  \{:acceleration 0\cf0 \
\cf2 ;   :rotation (direction->rotation (:velocity p))\})\cf0 \
\cf2 ;\cf0 \
\
\
\cf2 ;; Zapper stuff\cf0 \
\
\cf2 ;(defn user-proposals [p]\cf0 \
\cf2 ;  (let [zapper_sensed (filter :zapper (:sensed p))\cf0 \
\cf2 ;        beacon_sensed (filter :beacon (:sensed p))]\cf0 \
\cf2 ;  \{:rotation (if (or \cf0 \
\cf2 ;                   (not (empty? zapper_sensed))\cf0 \
\cf2 ;                    (= (first (next beacon_sensed)) (first (next (:zap_pos p)))))   \cf0 \
\cf2 ;               (let [zapdir (:position (first (filter :zapper (:sensed p))))]\cf0 \
\cf2 ;                 (+ pi (direction->rotation zapdir)))\cf0 \
\cf2 ;               (direction->rotation (:velocity p)))\cf0 \
\cf2 ;   \cf0 \
\cf2 ;   :acceleration (if (empty? (filter :zapper (:sensed p)))\cf0 \
\cf2 ;                   1\cf0 \
\cf2 ;                  (* 0.25 (- (length (:velocity p)))))\cf0 \
\cf2 ;   :memory (if (not (empty? zapper_sensed))\cf0 \
\cf2 ;             \{:zap_pos (filter :beacon (:sensed p))\}\cf0 \
\cf2 ;             \{\})\}))\cf0 \
\
\cf2 ;;; deleted stuff:\cf0 \
\cf2 ;                 (if (or (= (first beacon_sensed) (first (:vent_pos p)))               ; this part is to make sure that when it is stuck around a vent (with \cf0 \
\cf2 ;                         (= (first (next beacon_sensed)) (first (next (:vent_pos p))))\cf0 \
\cf2 ;                         (= (first beacon_sensed) (first (next (:vent_pos p))))\cf0 \
\cf2 ;                         (= (first (next beacon_sensed)) (first (:vent_pos p))))  \cf0 \
\cf2 ;                   ;(direction->rotation (:velocity p))\cf0 \
\
\cf2 ;;; User to avoid general region of zappers\cf0 \
\
\cf2 ;(defn user-proposals [p]\cf0 \
\cf2 ;  (let [vent_sensed (filter :vent (:sensed p))\cf0 \
\cf2 ;        beacon_sensed (into #\{\} (map :id (filter :beacon (:sensed p))))\cf0 \
\cf2 ;        beacon_sensed_relativepos (filter :beacon (:sensed p))\cf0 \
\cf2 ;        zapper_sensed (filter :zapper (:sensed p))\cf0 \
\cf2 ;        stone_sensed (filter :stone (:sensed p))\cf0 \
\cf2 ;        seen_zap (not (empty? (filter :zapper_pos (:memory p))))\cf0 \
\cf2 ;        zap_pos (:zapper_pos (:memory p))\cf0 \
\cf2 ;        dangerous_ids (intersection zap_pos beacon_sensed)]\cf0 \
\cf2 ;\cf0 \
\cf2 ;  \{:rotation (if seen_zap\cf0 \
\cf2 ;               (if (not(empty? dangerous_ids))\cf0 \
\cf2 ;                 (let [zapdir ((some #(when (= (first dangerous_ids) (:id %)) (:position %)) beacon_sensed_relativepos)\cf0 \
\cf2 ;                                \cf0 \
\cf2 ;                                ;; insert function that uses some to search to see if the first element in dangerous_ids is found in beacon_sensed_relativepos and returns the :position of that beacon)\cf0 \
\cf2 ;                                )]\cf0 \
\cf2 ;                   (+ pi (direction->rotation zapdir)))  \cf0 \
\cf2 ;                 \cf0 \
\cf2 ;                 \cf0 \
\cf2 ;                 \cf0 \
\cf2 ;                 \cf0 \
\cf2 ;                 (if (not (empty? zapper_sensed))\cf0 \
\cf2 ;                   (let [zapdir (:position (first (filter :zapper (:sensed p))))]\cf0 \
\cf2 ;                     (+ pi (direction->rotation zapdir)))\cf0 \
\cf2 ;                   (if (not (empty? stone_sensed))\cf0 \
\cf2 ;                     (let [stonedir (:position (first (filter :stone (:sensed p))))]\cf0 \
\cf2 ;                       (+ pi (direction->rotation stonedir))) \cf0 \
\cf2 ;                     (if (not (empty? (:vent_pos p)))\cf0 \
\cf2 ;                        (direction->rotation (:vent_pos p))\cf0 \
\cf2 ;                        (direction->rotation (:velocity p)))))))\cf0 \
\cf2 ;\cf0 \
\cf2 ;   :acceleration (if (empty? (filter :zapper (:sensed p)))\cf0 \
\cf2 ;                   1\cf0 \
\cf2 ;                  (* 0.25 (- (length (:velocity p)))))\cf0 \
\cf2 ;   :memory (if (or (not (empty? vent_sensed))\cf0 \
\cf2 ;                   (not (empty? stone_sensed))\cf0 \
\cf2 ;                   (not (empty? zapper_sensed)))\cf0 \
\cf2 ;             (if (not (empty? vent_sensed))\cf0 \
\cf2 ;               \{:vent_pos (filter :beacon (:sensed p))\}\cf0 \
\cf2 ;               (if (not (empty? stone_sensed))\cf0 \
\cf2 ;                 \{:stone_pos (filter :beacon (:sensed p))\}\cf0 \
\cf2 ;                 (if (not (empty? zapper_sensed))\cf0 \
\cf2 ;                   \{:zapper_pos (into #\{\}(concat (:zapper_pos (:memory p)) (map :id (filter :beacon (:sensed p)))))\}\cf0 \
\cf2 ;                   \{\}))))\}))   ;;; Question: Does this replace the things in the memory or do all three get stored? \cf0 \
            \
\cf2 ;;;Stone stuff \cf0 \
\
\pard\pardeftab720
\cf3 (\cf4 defn\cf0  user-proposals [p]\
  \cf5 (\cf4 let\cf0  [vent_sensed \cf7 (\cf4 filter\cf0  \cf6 :vent\cf0  \cf8 (\cf6 :sensed\cf0  p\cf8 )\cf7 )\cf0 \
        beacon_sensed \cf7 (\cf4 into\cf0  #\{\} \cf8 (\cf4 map\cf0  \cf6 :id\cf0  \cf9 (\cf4 filter\cf0  \cf6 :beacon\cf0  \cf10 (\cf6 :sensed\cf0  p\cf10 )\cf9 )\cf8 )\cf7 )\cf0 \
        beacon_sensed_relativepos \cf7 (\cf4 filter\cf0  \cf6 :beacon\cf0  \cf8 (\cf6 :sensed\cf0  p\cf8 )\cf7 )\cf0 \
        zapper_sensed \cf7 (\cf4 filter\cf0  \cf6 :zapper\cf0  \cf8 (\cf6 :sensed\cf0  p\cf8 )\cf7 )\cf0 \
        stone_sensed \cf7 (\cf4 filter\cf0  \cf6 :stone\cf0  \cf8 (\cf6 :sensed\cf0  p\cf8 )\cf7 )\cf0 \
        seen_zap \cf7 (\cf4 not\cf0  \cf8 (\cf4 empty?\cf0  \cf9 (\cf4 filter\cf0  \cf6 :zapper_pos\cf0  \cf10 (\cf6 :memory\cf0  p\cf10 )\cf9 )\cf8 )\cf7 )\cf0 \
        zap_pos \cf7 (\cf6 :zapper_pos\cf0  \cf8 (\cf6 :memory\cf0  p\cf8 )\cf7 )\cf0 \
        dangerous_ids \cf7 (\cf4 intersection\cf0  zap_pos beacon_sensed\cf7 )\cf0 ]\
\
    \{\cf6 :rotation\cf0  \cf7 (\cf4 if\cf0  \cf8 (\cf4 and\cf0  \cf9 (\cf4 not\cf0  \cf10 (\cf4 empty?\cf0  zapper_sensed\cf10 )\cf9 )\cf0 \
                        \cf9 (\cf4 >\cf0  10 \cf10 (\cf4 abs\cf0  \cf11 (\cf4 -\cf0  \cf12 (\cf6 :rotation\cf0  p\cf12 )\cf0  \cf12 (\cf4 direction->rotation\cf0  \cf3 (\cf6 :position\cf0  \cf5 (\cf4 first\cf0  \cf7 (\cf4 filter\cf0  \cf6 :zapper\cf0  \cf8 (\cf6 :sensed\cf0  p\cf8 )\cf7 )\cf5 )\cf3 )\cf12 )\cf11 )\cf10 )\cf9 )\cf8 )\cf0 \
                 \cf8 (\cf4 let\cf0  [zapdir \cf9 (\cf6 :position\cf0  \cf10 (\cf4 first\cf0  \cf11 (\cf4 filter\cf0  \cf6 :zapper\cf0  \cf12 (\cf6 :sensed\cf0  p\cf12 )\cf11 )\cf10 )\cf9 )\cf0 ]\
                   \cf9 (\cf4 +\cf0  pi \cf10 (\cf4 direction->rotation\cf0  zapdir\cf10 )\cf9 )\cf8 )\cf0 \
               \
                 \cf8 (\cf4 if\cf0  \cf2 ;(and (< (count (into #\{\} stone_sensed)) 5)\cf0 \
                          \cf9 (\cf4 >\cf0  \cf10 (\cf4 count\cf0  \cf11 (\cf4 into\cf0  #\{\} stone_sensed\cf11 )\cf10 )\cf0  0\cf9 )\cf2 ;)\cf0 \
                   \cf9 (\cf4 let\cf0  [stonedir \cf10 (\cf4 apply\cf0  avgv \cf11 (\cf4 map\cf0  \cf6 :position\cf0  \cf12 (\cf4 filter\cf0  \cf6 :stone\cf0  \cf3 (\cf6 :sensed\cf0  p\cf3 )\cf12 )\cf11 )\cf10 )\cf0 ]\
                     \cf10 (\cf4 +\cf0  pi \cf11 (\cf4 direction->rotation\cf0  stonedir\cf11 )\cf10 )\cf9 )\cf0  \
                 \
                   \cf9 (\cf4 if\cf0  \cf10 (\cf4 not\cf0  \cf11 (\cf4 empty?\cf0  \cf12 (\cf6 :vent_pos\cf0  p\cf12 )\cf11 )\cf10 )\cf0  \
                     \cf10 (\cf4 direction->rotation\cf0  \cf11 (\cf6 :vent_pos\cf0  p\cf11 )\cf10 )\cf0 \
                     \cf10 (\cf4 direction->rotation\cf0  \cf11 (\cf6 :velocity\cf0  p\cf11 )\cf10 )\cf9 )\cf8 )\cf7 )\cf0 \
\
     \cf6 :acceleration\cf0  \cf7 (\cf4 if\cf0  \cf8 (\cf4 empty?\cf0  \cf9 (\cf4 filter\cf0  \cf6 :zapper\cf0  \cf10 (\cf6 :sensed\cf0  p\cf10 )\cf9 )\cf8 )\cf0 \
                     1\
                    \cf8 (\cf4 *\cf0  0.25 \cf9 (\cf4 -\cf0  \cf10 (\cf4 length\cf0  \cf11 (\cf6 :velocity\cf0  p\cf11 )\cf10 )\cf9 )\cf8 )\cf7 )\cf0 \
     \cf6 :memory\cf0  \cf7 (\cf4 if\cf0  \cf8 (\cf4 or\cf0  \cf9 (\cf4 not\cf0  \cf10 (\cf4 empty?\cf0  vent_sensed\cf10 )\cf9 )\cf0 \
                     \cf9 (\cf4 not\cf0  \cf10 (\cf4 empty?\cf0  stone_sensed\cf10 )\cf9 )\cf0 \
                     \cf9 (\cf4 not\cf0  \cf10 (\cf4 empty?\cf0  zapper_sensed\cf10 )\cf9 )\cf8 )\cf0 \
               \cf8 (\cf4 if\cf0  \cf9 (\cf4 not\cf0  \cf10 (\cf4 empty?\cf0  vent_sensed\cf10 )\cf9 )\cf0 \
                 \{\cf6 :vent_pos\cf0  \cf9 (\cf4 filter\cf0  \cf6 :beacon\cf0  \cf10 (\cf6 :sensed\cf0  p\cf10 )\cf9 )\cf0 \}\
                 \cf9 (\cf4 if\cf0  \cf10 (\cf4 not\cf0  \cf11 (\cf4 empty?\cf0  stone_sensed\cf11 )\cf10 )\cf0 \
                   \{\cf6 :stone_pos\cf0  \cf10 (\cf4 filter\cf0  \cf6 :beacon\cf0  \cf11 (\cf6 :sensed\cf0  p\cf11 )\cf10 )\cf0 \}\
                   \cf10 (\cf4 if\cf0  \cf11 (\cf4 not\cf0  \cf12 (\cf4 empty?\cf0  zapper_sensed\cf12 )\cf11 )\cf0 \
                     \{\cf6 :zapper_pos\cf0  \cf11 (\cf4 into\cf0  #\{\}\cf12 (\cf4 concat\cf0  \cf3 (\cf6 :zapper_pos\cf0  \cf5 (\cf6 :memory\cf0  p\cf5 )\cf3 )\cf0  \cf3 (\cf4 map\cf0  \cf6 :id\cf0  \cf5 (\cf4 filter\cf0  \cf6 :beacon\cf0  \cf7 (\cf6 :sensed\cf0  p\cf7 )\cf5 )\cf3 )\cf12 )\cf11 )\cf0 \}\
                     \{\}\cf10 )\cf9 )\cf8 )\cf7 )\cf0 \}\cf5 )\cf3 )\cf0    \cf2 ;;; Question: Does this replace the things in the memory or do all three get stored? \cf0 \
\
\
\cf3 (\cf4 defn\cf0  user []\
 \cf5 (\cf4 merge\cf0  \cf7 (\cf4 active\cf7 )\cf0 \
         \{\cf6 :user\cf0  \cf13 true\cf0 \
          \cf6 :color\cf0  [150 0 150]\
          \cf6 :eye-color\cf0  [255 255 255]\
         \cf6 :proposal-function\cf0  user-proposals\
         \cf6 :memory\cf0  \{\cf6 :zapper_pos\cf0  \{\}\
                  \cf6 :stone_pos\cf0  \{\}\
                  \cf6 :vent_pos\cf0  \{\}\}\
          \cf2 ;:mobile false\cf0 \
          \}\cf5 )\cf3 )}